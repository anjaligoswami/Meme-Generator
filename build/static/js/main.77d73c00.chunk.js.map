{"version":3,"sources":["components/Templates.jsx","components/meme.jsx","App.js","index.js"],"names":["Template","templates","setMeme","className","map","template","onClick","style","backgroundImage","url","id","Meme","meme","useState","template_id","username","password","boxes","form","setForm","src","alt","Array","box_count","_","index","type","placeholder","onChange","e","newBoxes","text","target","value","box","fetch","then","response","json","data","App","setTemplates","useEffect","memes","ReactDOM","render","document","getElementById"],"mappings":"4KAqBiBA,EArBA,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QAC3B,OACE,qBAAKC,UAAU,YAAf,SACGF,EAAUG,KAAI,SAACC,GAAD,OACb,qBAEEF,UAAU,WACVG,QAAS,WACPJ,EAAQG,IAJZ,SAOE,qBACEE,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAASI,IAAlB,MACxBN,UAAU,WARPE,EAASK,U,cC8CXC,EAjDF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMV,EAAc,EAAdA,QACpB,EAAwBW,mBAAS,CAC/BC,YAAaF,EAAKF,GAClBK,SAAU,eACVC,SAAU,YACVC,MAAO,KAJT,mBAAOC,EAAP,KAAaC,EAAb,KAiBA,OACE,sBAAKhB,UAAU,OAAf,UACE,qBAAKiB,IAAKR,EAAKH,IAAKY,IAAI,KACxB,8BACG,YAAIC,MAAMV,EAAKW,YAAYnB,KAAI,SAACoB,EAAGC,GAAJ,OAC9B,uBAEEC,KAAK,OACLC,YAAW,uBAAkBF,EAAQ,GACrCG,SAAU,SAACC,GACT,IAAMC,EAAWZ,EAAKD,MACtBa,EAASL,GAAS,CAAEM,KAAMF,EAAEG,OAAOC,OACnCd,EAAQ,2BAAKD,GAAN,IAAYD,MAAOa,OANvBL,QAWX,gCACE,wBAAQnB,QA7BO,WACnB,IAAIG,EAAG,4DAAwDS,EAAKJ,YAA7D,qBAAqFI,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMb,KAAI,SAAC8B,EAAKT,GACnBhB,GAAG,iBAAcgB,EAAd,mBAA8BS,EAAIH,SAEvCI,MAAM1B,GACH2B,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLrC,EAAQ,2BAAIU,GAAL,IAAWH,IAAK8B,EAAKA,KAAK9B,WAqBjC,2BACA,wBACEH,QAAS,WACPJ,EAAQ,OAFZ,oCCXOsC,MAtBf,WACE,MAAkC3B,mBAAS,IAA3C,mBAAOZ,EAAP,KAAkBwC,EAAlB,KACA,EAAwB5B,mBAAS,MAAjC,mBAAOD,EAAP,KAAaV,EAAb,KAQA,OAPAwC,qBAAU,WACRP,MAAM,qCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLE,EAAaF,EAAKA,KAAKI,YAE1B,IAED,sBAAKxC,UAAU,MAAf,UACE,gDACU,OAATS,EACC,cAAC,EAAD,CAAUX,UAAWA,EAAWC,QAASA,IAEzC,cAAC,EAAD,CAAMU,KAAMA,EAAMV,QAASA,QClBnC0C,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.77d73c00.chunk.js","sourcesContent":["const Template = ({ templates, setMeme }) => {\n    return (\n      <div className=\"templates\">\n        {templates.map((template) => (\n          <div\n            key={template.id}\n            className=\"template\"\n            onClick={() => {\n              setMeme(template);\n            }}\n          >\n            <div\n              style={{ backgroundImage: `url(${template.url})` }}\n              className=\"image\"\n            ></div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n  \n  export default Template;\n  ","import { useState } from \"react\";\n\nconst Meme = ({ meme, setMeme }) => {\n  const [form, setForm] = useState({\n    template_id: meme.id,\n    username: \"dhruvgamer99\",\n    password: \"dhruvgarg\",\n    boxes: [],\n  });\n  const generateMeme = () => {\n    let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\n    form.boxes.map((box, index) => {\n      url += `&boxes[${index}][text]=${box.text}`;\n    });\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setMeme({...meme, url: data.data.url});\n      });\n  };\n  return (\n    <div className=\"meme\">\n      <img src={meme.url} alt=\"\" />\n      <div>\n        {[...Array(meme.box_count)].map((_, index) => (\n          <input\n            key={index}\n            type=\"text\"\n            placeholder={`Meme Caption ${index + 1}`}\n            onChange={(e) => {\n              const newBoxes = form.boxes;\n              newBoxes[index] = { text: e.target.value };\n              setForm({ ...form, boxes: newBoxes });\n            }}\n          />\n        ))}\n      </div>\n      <div>\n        <button onClick={generateMeme}>Generate Meme</button>\n        <button\n          onClick={() => {\n            setMeme(null);\n          }}\n        >\n          Choose Template\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Meme;","\nimport \"./App.css\";\nimport Template from \"./components/Templates\";\nimport Meme from \"./components/meme\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [meme, setMeme] = useState(null);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((response) => response.json())\n      .then((data) => {\n        setTemplates(data.data.memes);\n      });\n  }, []);\n  return (\n    <div className=\"App\">\n      <h1>Meme Generator</h1>\n      {meme === null ? (\n        <Template templates={templates} setMeme={setMeme} />\n      ) : (\n        <Meme meme={meme} setMeme={setMeme}/>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}